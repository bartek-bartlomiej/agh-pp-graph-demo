# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.dual_type import DualType  # noqa: F401,E501
from swagger_server import util


class NodeData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: DualType=None, value: DualType=None, name: DualType=None):  # noqa: E501
        """NodeData - a model defined in Swagger

        :param id: The id of this NodeData.  # noqa: E501
        :type id: DualType
        :param value: The value of this NodeData.  # noqa: E501
        :type value: DualType
        :param name: The name of this NodeData.  # noqa: E501
        :type name: DualType
        """
        self.swagger_types = {
            'id': DualType,
            'value': DualType,
            'name': DualType
        }

        self.attribute_map = {
            'id': 'id',
            'value': 'value',
            'name': 'name'
        }
        self._id = id
        self._value = value
        self._name = name

    @classmethod
    def from_dict(cls, dikt) -> 'NodeData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Node_data of this NodeData.  # noqa: E501
        :rtype: NodeData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> DualType:
        """Gets the id of this NodeData.


        :return: The id of this NodeData.
        :rtype: DualType
        """
        return self._id

    @id.setter
    def id(self, id: DualType):
        """Sets the id of this NodeData.


        :param id: The id of this NodeData.
        :type id: DualType
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def value(self) -> DualType:
        """Gets the value of this NodeData.


        :return: The value of this NodeData.
        :rtype: DualType
        """
        return self._value

    @value.setter
    def value(self, value: DualType):
        """Sets the value of this NodeData.


        :param value: The value of this NodeData.
        :type value: DualType
        """

        self._value = value

    @property
    def name(self) -> DualType:
        """Gets the name of this NodeData.


        :return: The name of this NodeData.
        :rtype: DualType
        """
        return self._name

    @name.setter
    def name(self, name: DualType):
        """Sets the name of this NodeData.


        :param name: The name of this NodeData.
        :type name: DualType
        """

        self._name = name
