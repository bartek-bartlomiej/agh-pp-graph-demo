openapi: 3.0.1
info:
  title: PP graph app
  version: 0.1.0
servers:
- url: http://localhost:8080/api
tags:
- name: generators
  description: Endpoints for NetworkX generators
- name: layouts
  description: Endpoints for NetworkX layout generators
paths:
  /graph/generators:
    get:
      tags:
      - generators
      summary: Returns supported NetowrkX generators
      operationId: get_generators
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Generator'
                x-content-type: application/json
      x-openapi-router-controller: swagger_server.controllers.generators_controller
  /graph/generate:
    post:
      tags:
      - generators
      summary: Generate certain graph
      operationId: generate
      requestBody:
        description: Generator name (and its parameters)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Generator'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Graph'
        "405":
          description: Invalid input
          content: {}
      x-openapi-router-controller: swagger_server.controllers.generators_controller
  /graph/layouts:
    get:
      tags:
      - layouts
      summary: Returns supported NetowrkX layout algorithms
      operationId: get_layouts
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Layout'
                x-content-type: application/json
      x-openapi-router-controller: swagger_server.controllers.layouts_controller
  /graph/arrange:
    post:
      tags:
      - layouts
      summary: Arrange graph
      operationId: arrange
      requestBody:
        description: Graph to arrange and algorithm info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArrangmentInfo'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NodePosition'
                x-content-type: application/json
        "405":
          description: Invalid input
          content: {}
      x-openapi-router-controller: swagger_server.controllers.layouts_controller
  /graph/parse:
    post:
      tags:
      - parse
      summary: parse graph from attached files
      operationId: upload_file
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Graph'
      x-openapi-router-controller: swagger_server.controllers.parse_controller
components:
  schemas:
    Generator:
      type: object
      properties:
        name:
          type: string
      example:
        name: name
    Graph:
      required:
      - elements
      type: object
      properties:
        data:
          type: array
          items:
            type: string
        directed:
          type: boolean
        multigraph:
          type: boolean
        elements:
          $ref: '#/components/schemas/Graph_elements'
      example:
        directed: true
        data:
        - data
        - data
        elements:
          nodes:
          - name: name
            id: id
            value: {}
          - name: name
            id: id
            value: {}
          edges:
          - source: source
            key: key
            target: target
          - source: source
            key: key
            target: target
        multigraph: true
    Node:
      required:
      - id
      type: object
      properties:
        id:
          type: string
        value:
          type: object
          properties: {}
          example: {}
        name:
          type: string
      example:
        name: name
        id: id
        value: {}
    Edge:
      required:
      - source
      - target
      type: object
      properties:
        source:
          type: string
        target:
          type: string
        key:
          type: string
      example:
        source: source
        key: key
        target: target
    Layout:
      type: object
      properties:
        name:
          type: string
      example:
        name: name
    ArrangmentInfo:
      type: object
      properties:
        graph:
          $ref: '#/components/schemas/Graph'
        layout:
          $ref: '#/components/schemas/Layout'
    NodePosition:
      type: object
      properties:
        id:
          type: string
        x:
          type: number
        y:
          type: number
      example:
        x: 0.8008281904610115
        y: 6.027456183070403
        id: id
    body:
      required:
      - file
      properties:
        file:
          type: string
          description: File with edges to upload
          format: binary
        additionalMetadata:
          type: string
          description: Additional data to pass to server
    Graph_elements:
      type: object
      properties:
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/Node'
        edges:
          type: array
          items:
            $ref: '#/components/schemas/Edge'
      example:
        nodes:
        - name: name
          id: id
          value: {}
        - name: name
          id: id
          value: {}
        edges:
        - source: source
          key: key
          target: target
        - source: source
          key: key
          target: target

